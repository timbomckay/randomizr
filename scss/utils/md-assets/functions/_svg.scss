////
/// SVG functions
/// @author Mission Data
/// @access public
////

///
/// Generate a `url()` reference to an SVG. The file will be
/// URI-encoded before return.
/// @group svg
///
/// @param {SVG}       $svg - SVG content
///
/// @example scss - use an SVG as a background image
///   background-image: svg-url("<svg...> ... </svg>");
///
/// @example css - CSS output
///   background-image: url("data:image/svg+xml;charset=utf8,"<svg...> ... </svg>");
///
/// @return {String}   URL reference with encoded SVG
///
@function svg-url($svg) {
  @return url(svg-uri-encode($svg));
}

///
/// URI-encode an SVG file for use within a stylesheet. Most modern browsers are capable of rendering an SVG
/// as an embedded background image but others require the svg to run through a URI encoding to replace various
/// HTML characters (detailed below). Instead of using a webapp to render the encoding every time you change
/// the SVG, you can use this function to do the encoding when Sass generates the new CSS.
///
/// The `encodeURIComponent()` method encodes a Uniform Resource Identifier (URI) component by replacing each instance
/// of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character
/// (will only be four escape sequences for characters composed of two "surrogate" characters).
/// @group svg
///
/// @param {SVG}       $svg - SVG content
///
/// @return {String}   URI-encoded SVG
///
@function svg-uri-encode($svg) {
  // Chunk up string in order to avoid "SystemStackError: stack level too deep"
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk,' ','%20');
    $chunk: str-replace($chunk,'"','%22');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $chunk: str-replace($chunk,'=','%3D');
    $chunk: str-replace($chunk,'/','%2F');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return "data:image/svg+xml;charset=utf8,#{$encoded}";
}
