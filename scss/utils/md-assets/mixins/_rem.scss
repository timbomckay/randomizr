////
/// Rem unit mixins
/// @author Mission Data
/// @access public
////

///
/// Output any property with equivalent rem and pixel values. Default property is `font-size`.
/// Useful when supporting browsers which do not support `rem`.
/// Values should be provided as unitless rems (see example).
///
/// @param {Property}  $property - CSS property to use
/// @param {Sizes}     $sizes - comma-separated list of values to convert
///
/// @example scss - Set font-size of element to `1.5rem`
///   @include rem(1.5)
///
/// @example css - Output
///   font-size: 24px;
///   font-size: 1.5rem;
///
/// @example scss - Apply `2rem` of padding to top and bottom, and `4rem` to left and right
///   @include rem('padding', 2, 4, 2, 4)
///
/// @example css - Output
///   padding: 32px 64px 32px 64px;
///   padding: 2rem 4rem 2rem 4rem;
///
@mixin rem($prop: 1, $sizes...) {
  @if type_of($prop) == number {
    .lt-ie9 & { font-size: $prop * 16px }
    font-size: $prop * 1rem;
  } @else {
    $max: length($sizes);
    $pxs: '';
    $rems: '';
    @for $i from 1 through $max {
      $size: strip-unit(nth($sizes, $i));
      $pxs: #{$pxs + $size*16}px;
      $rems: #{$rems + $size}rem;
      @if $i < $max {
        $pxs: #{$pxs + " "};
        $rems: #{$rems + " "};
      }
    }

    .lt-ie9 & { #{$prop}: $pxs; }
    #{$prop}: $rems;
  }
}
